// blobheart v0.0.1
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/golang
// Do not edit by hand. Update your webrpc schema and re-generate.
package proto

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.0.1"
}

//
// Types
//

type FinetuneStatus uint32

var (
	FinetuneStatus_UNKNOWN             FinetuneStatus = 0
	FinetuneStatus_CREATED             FinetuneStatus = 1
	FinetuneStatus_DATA_PROCESSING     FinetuneStatus = 2
	FinetuneStatus_FINETUNING          FinetuneStatus = 3
	FinetuneStatus_EXPORTING_MODEL     FinetuneStatus = 4
	FinetuneStatus_DEPLOYING_API       FinetuneStatus = 5
	FinetuneStatus_READY               FinetuneStatus = 6
	FinetuneStatus_FAILED              FinetuneStatus = 7
	FinetuneStatus_DELETED             FinetuneStatus = 8
	FinetuneStatus_DELETE_FAILED       FinetuneStatus = 9
	FinetuneStatus_CANCELLED           FinetuneStatus = 10
	FinetuneStatus_TEMPORARILY_OFFLINE FinetuneStatus = 11
)

var FinetuneStatus_name = map[uint32]string{
	0:  "UNKNOWN",
	1:  "CREATED",
	2:  "DATA_PROCESSING",
	3:  "FINETUNING",
	4:  "EXPORTING_MODEL",
	5:  "DEPLOYING_API",
	6:  "READY",
	7:  "FAILED",
	8:  "DELETED",
	9:  "DELETE_FAILED",
	10: "CANCELLED",
	11: "TEMPORARILY_OFFLINE",
}

var FinetuneStatus_value = map[string]uint32{
	"UNKNOWN":             0,
	"CREATED":             1,
	"DATA_PROCESSING":     2,
	"FINETUNING":          3,
	"EXPORTING_MODEL":     4,
	"DEPLOYING_API":       5,
	"READY":               6,
	"FAILED":              7,
	"DELETED":             8,
	"DELETE_FAILED":       9,
	"CANCELLED":           10,
	"TEMPORARILY_OFFLINE": 11,
}

func (x FinetuneStatus) String() string {
	return FinetuneStatus_name[uint32(x)]
}

func (x FinetuneStatus) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString(`"`)
	buf.WriteString(FinetuneStatus_name[uint32(x)])
	buf.WriteString(`"`)
	return buf.Bytes(), nil
}

func (x *FinetuneStatus) UnmarshalJSON(b []byte) error {
	var j string
	err := json.Unmarshal(b, &j)
	if err != nil {
		return err
	}
	*x = FinetuneStatus(FinetuneStatus_value[j])
	return nil
}

type InviteExpiryDuration uint32

var (
	InviteExpiryDuration_UNKNOWN        InviteExpiryDuration = 0
	InviteExpiryDuration_THIRTY_MINUTES InviteExpiryDuration = 1
	InviteExpiryDuration_ONE_HOUR       InviteExpiryDuration = 2
	InviteExpiryDuration_SIX_HOURS      InviteExpiryDuration = 3
	InviteExpiryDuration_TWELVE_HOURS   InviteExpiryDuration = 4
	InviteExpiryDuration_ONE_DAY        InviteExpiryDuration = 5
	InviteExpiryDuration_NEVER          InviteExpiryDuration = 6
)

var InviteExpiryDuration_name = map[uint32]string{
	0: "UNKNOWN",
	1: "THIRTY_MINUTES",
	2: "ONE_HOUR",
	3: "SIX_HOURS",
	4: "TWELVE_HOURS",
	5: "ONE_DAY",
	6: "NEVER",
}

var InviteExpiryDuration_value = map[string]uint32{
	"UNKNOWN":        0,
	"THIRTY_MINUTES": 1,
	"ONE_HOUR":       2,
	"SIX_HOURS":      3,
	"TWELVE_HOURS":   4,
	"ONE_DAY":        5,
	"NEVER":          6,
}

func (x InviteExpiryDuration) String() string {
	return InviteExpiryDuration_name[uint32(x)]
}

func (x InviteExpiryDuration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString(`"`)
	buf.WriteString(InviteExpiryDuration_name[uint32(x)])
	buf.WriteString(`"`)
	return buf.Bytes(), nil
}

func (x *InviteExpiryDuration) UnmarshalJSON(b []byte) error {
	var j string
	err := json.Unmarshal(b, &j)
	if err != nil {
		return err
	}
	*x = InviteExpiryDuration(InviteExpiryDuration_value[j])
	return nil
}

type UserRole uint32

var (
	UserRole_ADMIN     UserRole = 0
	UserRole_USER      UserRole = 1
	UserRole_ORG_ADMIN UserRole = 2
)

var UserRole_name = map[uint32]string{
	0: "ADMIN",
	1: "USER",
	2: "ORG_ADMIN",
}

var UserRole_value = map[string]uint32{
	"ADMIN":     0,
	"USER":      1,
	"ORG_ADMIN": 2,
}

func (x UserRole) String() string {
	return UserRole_name[uint32(x)]
}

func (x UserRole) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString(`"`)
	buf.WriteString(UserRole_name[uint32(x)])
	buf.WriteString(`"`)
	return buf.Bytes(), nil
}

func (x *UserRole) UnmarshalJSON(b []byte) error {
	var j string
	err := json.Unmarshal(b, &j)
	if err != nil {
		return err
	}
	*x = UserRole(UserRole_value[j])
	return nil
}

type Finetune struct {
	ID             string            `json:"id" db:"id,omitempty,pk"`
	DataLocation   string            `json:"dataLocation"`
	Name           string            `json:"name" db:"name"`
	VxPipelineID   int64             `json:"vx_pipeline_id" db:"vx_pipeline_id"`
	CreatorID      string            `json:"creator_id" db:"creator_id"`
	OrganizationID string            `json:"organization_id" db:"organization_id"`
	Status         FinetuneStatus    `json:"status" db:"status"`
	Logs           *string           `json:"logs,omitempty" db:"logs,omitempty"`
	CreatedAt      time.Time         `json:"created_at,omitempty" db:"created_at"`
	UpdatedAt      time.Time         `json:"updated_at,omitempty" db:"updated_at"`
	Settings       *FinetuneSettings `json:"settings,omitempty" db:"-,omitempty"`
}

type APIKey struct {
	ID        string    `json:"id,omitempty" db:"id,omitempty,pk"`
	Name      string    `json:"name,omitempty" db:"name"`
	CreatedAt time.Time `json:"created_at" db:"created_at"`
	RawKey    string    `json:"raw_key,omitempty" db:"-"`
	Revoked   bool      `json:"revoked,omitempty" db:"revoked"`
}

type AurthurKey struct {
	ID     string `json:"id" db:"id,omitempty,pk"`
	RawKey string `json:"rawKey" db:"-"`
}

type UserQuery struct {
	OrganizationIdentifier string    `json:"organization_identifier,omitempty"`
	Email                  string    `json:"email,omitempty"`
	Role                   *UserRole `json:"role,omitempty"`
}

type User struct {
	ID               string    `json:"id" db:"id,omitempty,pk"`
	Email            string    `json:"email" db:"email"`
	Role             UserRole  `json:"role" db:"role"`
	OrganizationName string    `json:"organization_name,omitempty"`
	OrganizationID   string    `json:"organization_id" db:"organization_id"`
	CreatedAt        time.Time `json:"created_at,omitempty" db:"created_at"`
	UpdatedAt        time.Time `json:"updated_at,omitempty" db:"updated_at"`
}

type Organization struct {
	ID        string    `json:"id" db:"id,omitempty,pk"`
	Name      string    `json:"name" db:"name"`
	CreatedAt time.Time `json:"created_at,omitempty" db:"created_at"`
	UpdatedAt time.Time `json:"updated_at,omitempty" db:"updated_at"`
}

type AurthurUser struct {
	ID        string    `json:"id" db:"id,omitempty,pk"`
	Email     string    `json:"email" db:"email"`
	CreatedAt time.Time `json:"created_at,omitempty" db:"created_at"`
	UpdatedAt time.Time `json:"updated_at,omitempty" db:"updated_at"`
}

type Model struct {
	Name       string   `json:"name"`
	Endpoints  []string `json:"endpoints"`
	IsFinetune bool     `json:"is_finetune"`
}

type FinetuneSettings struct {
	Separator string `json:"separator"`
}

type BlobheartAPI interface {
	Ping(ctx context.Context) (string, error)
	PingVx(ctx context.Context) (string, error)
	Auth(ctx context.Context, email string, password string) (string, error)
	Session(ctx context.Context) (*User, error)
	UpdateUserRole(ctx context.Context, userID string, role *UserRole) error
	Register(ctx context.Context, email string, password string, inviteHash string) error
	InviteUser(ctx context.Context, email string, organization string, role *UserRole, expiry *InviteExpiryDuration) error
	CreateInviteLink(ctx context.Context, organization string, role *UserRole, expiry *InviteExpiryDuration, maxUses int) (string, error)
	ListUsers(ctx context.Context, query *UserQuery) ([]*User, error)
	RequestPasswordReset(ctx context.Context, email string) error
	ProcessPasswordReset(ctx context.Context, email string, newPassword string, hash string) error
	CreateOrganization(ctx context.Context, name string) error
	ListOrganizations(ctx context.Context) ([]*Organization, error)
	CreateFinetune(ctx context.Context, dataLocation string, name string, settings *FinetuneSettings) error
	GetFinetuneUploadSignedURL(ctx context.Context, finetuneName string) (string, string, error)
	GetFinetuneLogs(ctx context.Context, finetuneID string) (string, error)
	DeleteFinetune(ctx context.Context, finetuneID string) error
	RedeployFinetune(ctx context.Context, finetuneID string) error
	ListFinetunes(ctx context.Context) ([]*Finetune, error)
	GetFinetune(ctx context.Context, finetuneID string) (*Finetune, error)
	ListModels(ctx context.Context) ([]*Model, error)
	CreateAPIKey(ctx context.Context, name string) (*APIKey, error)
	ListAPIKeys(ctx context.Context, includeRevoked bool) ([]*APIKey, error)
	GetRawAPIKey(ctx context.Context, keyID string) (string, error)
	RevokeAPIKey(ctx context.Context, keyID string) error
}

type Bzz interface {
	Ping(ctx context.Context) (string, error)
	Sample(ctx context.Context, prompt string, num_samples int, max_tokens int, temperature float32) ([]string, error)
	Distance(ctx context.Context, anchor string, targets []string) ([]float32, error)
	Embed(ctx context.Context, texts []string) ([][]float32, error)
}

type Aurthur interface {
	Auth(ctx context.Context, email string, password string) (string, error)
	CheckAPIKeyScope(ctx context.Context, key string, scope string) (bool, error)
	CreateKey(ctx context.Context, scopes []string) (*AurthurKey, error)
	GetKeyValue(ctx context.Context, keyID string) (string, error)
	DeleteKey(ctx context.Context, keyID string) error
	AddScope(ctx context.Context, keyID string, scope string) error
}

var WebRPCServices = map[string][]string{
	"BlobheartAPI": {
		"Ping",
		"PingVx",
		"Auth",
		"Session",
		"UpdateUserRole",
		"Register",
		"InviteUser",
		"CreateInviteLink",
		"ListUsers",
		"RequestPasswordReset",
		"ProcessPasswordReset",
		"CreateOrganization",
		"ListOrganizations",
		"CreateFinetune",
		"GetFinetuneUploadSignedURL",
		"GetFinetuneLogs",
		"DeleteFinetune",
		"RedeployFinetune",
		"ListFinetunes",
		"GetFinetune",
		"ListModels",
		"CreateAPIKey",
		"ListAPIKeys",
		"GetRawAPIKey",
		"RevokeAPIKey",
	},
	"Bzz": {
		"Ping",
		"Sample",
		"Distance",
		"Embed",
	},
	"Aurthur": {
		"Auth",
		"CheckAPIKeyScope",
		"CreateKey",
		"GetKeyValue",
		"DeleteKey",
		"AddScope",
	},
}

//
// Server
//

type WebRPCServer interface {
	http.Handler
}

type BlobheartAPIServer interface {
	BlobheartAPI
}

type blobheartAPIServer struct {
	service BlobheartAPIServer
}

func NewBlobheartAPIServer(svc BlobheartAPIServer) WebRPCServer {
	return &blobheartAPIServer{
		service: svc,
	}
}

func (s *blobheartAPIServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "BlobheartAPI")

	if r.Method != "POST" {
		RespondWithError(w, Errorf(ErrBadRoute, nil, "unsupported method %q (only POST is allowed)", r.Method))
		return
	}

	if !strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {
		RespondWithError(w, Errorf(ErrBadRoute, nil, "unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		return
	}

	switch r.URL.Path {
	case "/rpc/BlobheartAPI/Ping":
		s.servePing(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/PingVx":
		s.servePingVx(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/Auth":
		s.serveAuth(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/Session":
		s.serveSession(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/UpdateUserRole":
		s.serveUpdateUserRole(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/Register":
		s.serveRegister(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/InviteUser":
		s.serveInviteUser(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/CreateInviteLink":
		s.serveCreateInviteLink(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/ListUsers":
		s.serveListUsers(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/RequestPasswordReset":
		s.serveRequestPasswordReset(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/ProcessPasswordReset":
		s.serveProcessPasswordReset(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/CreateOrganization":
		s.serveCreateOrganization(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/ListOrganizations":
		s.serveListOrganizations(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/CreateFinetune":
		s.serveCreateFinetune(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/GetFinetuneUploadSignedURL":
		s.serveGetFinetuneUploadSignedURL(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/GetFinetuneLogs":
		s.serveGetFinetuneLogs(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/DeleteFinetune":
		s.serveDeleteFinetune(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/RedeployFinetune":
		s.serveRedeployFinetune(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/ListFinetunes":
		s.serveListFinetunes(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/GetFinetune":
		s.serveGetFinetune(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/ListModels":
		s.serveListModels(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/CreateAPIKey":
		s.serveCreateAPIKey(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/ListAPIKeys":
		s.serveListAPIKeys(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/GetRawAPIKey":
		s.serveGetRawAPIKey(ctx, w, r)
		return
	case "/rpc/BlobheartAPI/RevokeAPIKey":
		s.serveRevokeAPIKey(ctx, w, r)
		return
	default:
		RespondWithError(w, Errorf(ErrBadRoute, nil, "no handler for path %q", r.URL.Path))
		return
	}
}

func (s *blobheartAPIServer) servePing(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Ping")

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.Ping(ctx)
	}()
	respContent := struct {
		Ret0 string `json:"pong"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) servePingVx(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "PingVx")

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.PingVx(ctx)
	}()
	respContent := struct {
		Ret0 string `json:"pong"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveAuth(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Auth")
	reqContent := struct {
		Arg0 string `json:"email"`
		Arg1 string `json:"password"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.Auth(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 string `json:"token"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveSession(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Session")

	// Call service method
	var ret0 *User
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.Session(ctx)
	}()
	respContent := struct {
		Ret0 *User `json:"user"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveUpdateUserRole(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateUserRole")
	reqContent := struct {
		Arg0 string    `json:"userID"`
		Arg1 *UserRole `json:"role"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.UpdateUserRole(ctx, reqContent.Arg0, reqContent.Arg1)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveRegister(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Register")
	reqContent := struct {
		Arg0 string `json:"email"`
		Arg1 string `json:"password"`
		Arg2 string `json:"inviteHash"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.Register(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveInviteUser(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "InviteUser")
	reqContent := struct {
		Arg0 string                `json:"email"`
		Arg1 string                `json:"organization"`
		Arg2 *UserRole             `json:"role"`
		Arg3 *InviteExpiryDuration `json:"expiry"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.InviteUser(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2, reqContent.Arg3)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveCreateInviteLink(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CreateInviteLink")
	reqContent := struct {
		Arg0 string                `json:"organization"`
		Arg1 *UserRole             `json:"role"`
		Arg2 *InviteExpiryDuration `json:"expiry"`
		Arg3 int                   `json:"maxUses"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.CreateInviteLink(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2, reqContent.Arg3)
	}()
	respContent := struct {
		Ret0 string `json:"inviteLink"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveListUsers(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListUsers")
	reqContent := struct {
		Arg0 *UserQuery `json:"query"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 []*User
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.ListUsers(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 []*User `json:"users"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveRequestPasswordReset(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RequestPasswordReset")
	reqContent := struct {
		Arg0 string `json:"email"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.RequestPasswordReset(ctx, reqContent.Arg0)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveProcessPasswordReset(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ProcessPasswordReset")
	reqContent := struct {
		Arg0 string `json:"email"`
		Arg1 string `json:"newPassword"`
		Arg2 string `json:"hash"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.ProcessPasswordReset(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveCreateOrganization(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CreateOrganization")
	reqContent := struct {
		Arg0 string `json:"name"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.CreateOrganization(ctx, reqContent.Arg0)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveListOrganizations(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListOrganizations")

	// Call service method
	var ret0 []*Organization
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.ListOrganizations(ctx)
	}()
	respContent := struct {
		Ret0 []*Organization `json:"organizations"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveCreateFinetune(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CreateFinetune")
	reqContent := struct {
		Arg0 string            `json:"dataLocation"`
		Arg1 string            `json:"name"`
		Arg2 *FinetuneSettings `json:"settings"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.CreateFinetune(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveGetFinetuneUploadSignedURL(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetFinetuneUploadSignedURL")
	reqContent := struct {
		Arg0 string `json:"finetuneName"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 string
	var ret1 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, ret1, err = s.service.GetFinetuneUploadSignedURL(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 string `json:"url"`
		Ret1 string `json:"gcspath"`
	}{ret0, ret1}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveGetFinetuneLogs(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetFinetuneLogs")
	reqContent := struct {
		Arg0 string `json:"finetuneID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.GetFinetuneLogs(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 string `json:"logs"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveDeleteFinetune(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "DeleteFinetune")
	reqContent := struct {
		Arg0 string `json:"finetuneID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.DeleteFinetune(ctx, reqContent.Arg0)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveRedeployFinetune(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RedeployFinetune")
	reqContent := struct {
		Arg0 string `json:"finetuneID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.RedeployFinetune(ctx, reqContent.Arg0)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *blobheartAPIServer) serveListFinetunes(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListFinetunes")

	// Call service method
	var ret0 []*Finetune
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.ListFinetunes(ctx)
	}()
	respContent := struct {
		Ret0 []*Finetune `json:"finetunes"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveGetFinetune(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetFinetune")
	reqContent := struct {
		Arg0 string `json:"finetuneID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 *Finetune
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.GetFinetune(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *Finetune `json:"finetune"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveListModels(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListModels")

	// Call service method
	var ret0 []*Model
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.ListModels(ctx)
	}()
	respContent := struct {
		Ret0 []*Model `json:"models"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveCreateAPIKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CreateAPIKey")
	reqContent := struct {
		Arg0 string `json:"name"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 *APIKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.CreateAPIKey(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *APIKey `json:"key"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveListAPIKeys(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListAPIKeys")
	reqContent := struct {
		Arg0 bool `json:"includeRevoked"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 []*APIKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.ListAPIKeys(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 []*APIKey `json:"keys"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveGetRawAPIKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetRawAPIKey")
	reqContent := struct {
		Arg0 string `json:"keyID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.GetRawAPIKey(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 string `json:"keyString"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *blobheartAPIServer) serveRevokeAPIKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RevokeAPIKey")
	reqContent := struct {
		Arg0 string `json:"keyID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.RevokeAPIKey(ctx, reqContent.Arg0)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

type BzzServer interface {
	Bzz
}

type bzzServer struct {
	service BzzServer
}

func NewBzzServer(svc BzzServer) WebRPCServer {
	return &bzzServer{
		service: svc,
	}
}

func (s *bzzServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "Bzz")

	if r.Method != "POST" {
		RespondWithError(w, Errorf(ErrBadRoute, nil, "unsupported method %q (only POST is allowed)", r.Method))
		return
	}

	if !strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {
		RespondWithError(w, Errorf(ErrBadRoute, nil, "unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		return
	}

	switch r.URL.Path {
	case "/rpc/Bzz/Ping":
		s.servePing(ctx, w, r)
		return
	case "/rpc/Bzz/Sample":
		s.serveSample(ctx, w, r)
		return
	case "/rpc/Bzz/Distance":
		s.serveDistance(ctx, w, r)
		return
	case "/rpc/Bzz/Embed":
		s.serveEmbed(ctx, w, r)
		return
	default:
		RespondWithError(w, Errorf(ErrBadRoute, nil, "no handler for path %q", r.URL.Path))
		return
	}
}

func (s *bzzServer) servePing(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Ping")

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.Ping(ctx)
	}()
	respContent := struct {
		Ret0 string `json:"pong"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *bzzServer) serveSample(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Sample")
	reqContent := struct {
		Arg0 string  `json:"prompt"`
		Arg1 int     `json:"num_samples"`
		Arg2 int     `json:"max_tokens"`
		Arg3 float32 `json:"temperature"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 []string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.Sample(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2, reqContent.Arg3)
	}()
	respContent := struct {
		Ret0 []string `json:"text"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *bzzServer) serveDistance(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Distance")
	reqContent := struct {
		Arg0 string   `json:"anchor"`
		Arg1 []string `json:"targets"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 []float32
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.Distance(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 []float32 `json:"similarities"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *bzzServer) serveEmbed(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Embed")
	reqContent := struct {
		Arg0 []string `json:"texts"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 [][]float32
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.Embed(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 [][]float32 `json:"embeddings"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

type AurthurServer interface {
	Aurthur
}

type aurthurServer struct {
	service AurthurServer
}

func NewAurthurServer(svc AurthurServer) WebRPCServer {
	return &aurthurServer{
		service: svc,
	}
}

func (s *aurthurServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "Aurthur")

	if r.Method != "POST" {
		RespondWithError(w, Errorf(ErrBadRoute, nil, "unsupported method %q (only POST is allowed)", r.Method))
		return
	}

	if !strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {
		RespondWithError(w, Errorf(ErrBadRoute, nil, "unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		return
	}

	switch r.URL.Path {
	case "/rpc/Aurthur/Auth":
		s.serveAuth(ctx, w, r)
		return
	case "/rpc/Aurthur/CheckAPIKeyScope":
		s.serveCheckAPIKeyScope(ctx, w, r)
		return
	case "/rpc/Aurthur/CreateKey":
		s.serveCreateKey(ctx, w, r)
		return
	case "/rpc/Aurthur/GetKeyValue":
		s.serveGetKeyValue(ctx, w, r)
		return
	case "/rpc/Aurthur/DeleteKey":
		s.serveDeleteKey(ctx, w, r)
		return
	case "/rpc/Aurthur/AddScope":
		s.serveAddScope(ctx, w, r)
		return
	default:
		RespondWithError(w, Errorf(ErrBadRoute, nil, "no handler for path %q", r.URL.Path))
		return
	}
}

func (s *aurthurServer) serveAuth(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Auth")
	reqContent := struct {
		Arg0 string `json:"email"`
		Arg1 string `json:"password"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.Auth(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 string `json:"token"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *aurthurServer) serveCheckAPIKeyScope(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CheckAPIKeyScope")
	reqContent := struct {
		Arg0 string `json:"key"`
		Arg1 string `json:"scope"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.CheckAPIKeyScope(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 bool `json:"valid"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *aurthurServer) serveCreateKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CreateKey")
	reqContent := struct {
		Arg0 []string `json:"scopes"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 *AurthurKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.CreateKey(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *AurthurKey `json:"key"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *aurthurServer) serveGetKeyValue(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetKeyValue")
	reqContent := struct {
		Arg0 string `json:"keyID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	var ret0 string
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.service.GetKeyValue(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 string `json:"keyString"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to marshal json response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *aurthurServer) serveDeleteKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "DeleteKey")
	reqContent := struct {
		Arg0 string `json:"keyID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.DeleteKey(ctx, reqContent.Arg0)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

func (s *aurthurServer) serveAddScope(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "AddScope")
	reqContent := struct {
		Arg0 string `json:"keyID"`
		Arg1 string `json:"scope"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, Errorf(ErrInternal, err, "failed to read request data"))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, Errorf(ErrInvalidArgument, err, "failed to unmarshal request data"))
		return
	}

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		err = s.service.AddScope(ctx, reqContent.Arg0, reqContent.Arg1)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
}

//
// Server helpers
//

func RespondWithError(w http.ResponseWriter, err error) {
	e, ok := err.(Error)
	if !ok {
		e = Errorf(ErrInternal, err, err.Error())
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(HTTPStatusFromError(err))
	respBody, _ := json.Marshal(e)
	w.Write(respBody)
}

//
// Client
//

const BlobheartAPIPathPrefix = "/rpc/BlobheartAPI/"

const BzzPathPrefix = "/rpc/Bzz/"

const AurthurPathPrefix = "/rpc/Aurthur/"

type BlobheartAPIClient interface {
	BlobheartAPI
}

type BzzClient interface {
	Bzz
}

type AurthurClient interface {
	Aurthur
}

type blobheartAPIClient struct {
	client HTTPClient
	urls   [25]string
}

func NewBlobheartAPIClient(addr string, client HTTPClient) BlobheartAPIClient {
	prefix := urlBase(addr) + BlobheartAPIPathPrefix
	urls := [25]string{
		prefix + "Ping",
		prefix + "PingVx",
		prefix + "Auth",
		prefix + "Session",
		prefix + "UpdateUserRole",
		prefix + "Register",
		prefix + "InviteUser",
		prefix + "CreateInviteLink",
		prefix + "ListUsers",
		prefix + "RequestPasswordReset",
		prefix + "ProcessPasswordReset",
		prefix + "CreateOrganization",
		prefix + "ListOrganizations",
		prefix + "CreateFinetune",
		prefix + "GetFinetuneUploadSignedURL",
		prefix + "GetFinetuneLogs",
		prefix + "DeleteFinetune",
		prefix + "RedeployFinetune",
		prefix + "ListFinetunes",
		prefix + "GetFinetune",
		prefix + "ListModels",
		prefix + "CreateAPIKey",
		prefix + "ListAPIKeys",
		prefix + "GetRawAPIKey",
		prefix + "RevokeAPIKey",
	}
	return &blobheartAPIClient{
		client: client,
		urls:   urls,
	}
}

func (c *blobheartAPIClient) Ping(ctx context.Context) (string, error) {
	out := struct {
		Ret0 string `json:"pong"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[0], nil, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) PingVx(ctx context.Context) (string, error) {
	out := struct {
		Ret0 string `json:"pong"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[1], nil, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) Auth(ctx context.Context, email string, password string) (string, error) {
	in := struct {
		Arg0 string `json:"email"`
		Arg1 string `json:"password"`
	}{email, password}
	out := struct {
		Ret0 string `json:"token"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[2], in, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) Session(ctx context.Context) (*User, error) {
	out := struct {
		Ret0 *User `json:"user"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[3], nil, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) UpdateUserRole(ctx context.Context, userID string, role *UserRole) error {
	in := struct {
		Arg0 string    `json:"userID"`
		Arg1 *UserRole `json:"role"`
	}{userID, role}
	_, err := clientRequest(ctx, c.client, c.urls[4], in, nil)
	return err
}

func (c *blobheartAPIClient) Register(ctx context.Context, email string, password string, inviteHash string) error {
	in := struct {
		Arg0 string `json:"email"`
		Arg1 string `json:"password"`
		Arg2 string `json:"inviteHash"`
	}{email, password, inviteHash}
	_, err := clientRequest(ctx, c.client, c.urls[5], in, nil)
	return err
}

func (c *blobheartAPIClient) InviteUser(ctx context.Context, email string, organization string, role *UserRole, expiry *InviteExpiryDuration) error {
	in := struct {
		Arg0 string                `json:"email"`
		Arg1 string                `json:"organization"`
		Arg2 *UserRole             `json:"role"`
		Arg3 *InviteExpiryDuration `json:"expiry"`
	}{email, organization, role, expiry}
	_, err := clientRequest(ctx, c.client, c.urls[6], in, nil)
	return err
}

func (c *blobheartAPIClient) CreateInviteLink(ctx context.Context, organization string, role *UserRole, expiry *InviteExpiryDuration, maxUses int) (string, error) {
	in := struct {
		Arg0 string                `json:"organization"`
		Arg1 *UserRole             `json:"role"`
		Arg2 *InviteExpiryDuration `json:"expiry"`
		Arg3 int                   `json:"maxUses"`
	}{organization, role, expiry, maxUses}
	out := struct {
		Ret0 string `json:"inviteLink"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[7], in, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) ListUsers(ctx context.Context, query *UserQuery) ([]*User, error) {
	in := struct {
		Arg0 *UserQuery `json:"query"`
	}{query}
	out := struct {
		Ret0 []*User `json:"users"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[8], in, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) RequestPasswordReset(ctx context.Context, email string) error {
	in := struct {
		Arg0 string `json:"email"`
	}{email}
	_, err := clientRequest(ctx, c.client, c.urls[9], in, nil)
	return err
}

func (c *blobheartAPIClient) ProcessPasswordReset(ctx context.Context, email string, newPassword string, hash string) error {
	in := struct {
		Arg0 string `json:"email"`
		Arg1 string `json:"newPassword"`
		Arg2 string `json:"hash"`
	}{email, newPassword, hash}
	_, err := clientRequest(ctx, c.client, c.urls[10], in, nil)
	return err
}

func (c *blobheartAPIClient) CreateOrganization(ctx context.Context, name string) error {
	in := struct {
		Arg0 string `json:"name"`
	}{name}
	_, err := clientRequest(ctx, c.client, c.urls[11], in, nil)
	return err
}

func (c *blobheartAPIClient) ListOrganizations(ctx context.Context) ([]*Organization, error) {
	out := struct {
		Ret0 []*Organization `json:"organizations"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[12], nil, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) CreateFinetune(ctx context.Context, dataLocation string, name string, settings *FinetuneSettings) error {
	in := struct {
		Arg0 string            `json:"dataLocation"`
		Arg1 string            `json:"name"`
		Arg2 *FinetuneSettings `json:"settings"`
	}{dataLocation, name, settings}
	_, err := clientRequest(ctx, c.client, c.urls[13], in, nil)
	return err
}

func (c *blobheartAPIClient) GetFinetuneUploadSignedURL(ctx context.Context, finetuneName string) (string, string, error) {
	in := struct {
		Arg0 string `json:"finetuneName"`
	}{finetuneName}
	out := struct {
		Ret0 string `json:"url"`
		Ret1 string `json:"gcspath"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[14], in, &out)
	return out.Ret0, out.Ret1, err
}

func (c *blobheartAPIClient) GetFinetuneLogs(ctx context.Context, finetuneID string) (string, error) {
	in := struct {
		Arg0 string `json:"finetuneID"`
	}{finetuneID}
	out := struct {
		Ret0 string `json:"logs"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[15], in, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) DeleteFinetune(ctx context.Context, finetuneID string) error {
	in := struct {
		Arg0 string `json:"finetuneID"`
	}{finetuneID}
	_, err := clientRequest(ctx, c.client, c.urls[16], in, nil)
	return err
}

func (c *blobheartAPIClient) RedeployFinetune(ctx context.Context, finetuneID string) error {
	in := struct {
		Arg0 string `json:"finetuneID"`
	}{finetuneID}
	_, err := clientRequest(ctx, c.client, c.urls[17], in, nil)
	return err
}

func (c *blobheartAPIClient) ListFinetunes(ctx context.Context) ([]*Finetune, error) {
	out := struct {
		Ret0 []*Finetune `json:"finetunes"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[18], nil, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) GetFinetune(ctx context.Context, finetuneID string) (*Finetune, error) {
	in := struct {
		Arg0 string `json:"finetuneID"`
	}{finetuneID}
	out := struct {
		Ret0 *Finetune `json:"finetune"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[19], in, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) ListModels(ctx context.Context) ([]*Model, error) {
	out := struct {
		Ret0 []*Model `json:"models"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[20], nil, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) CreateAPIKey(ctx context.Context, name string) (*APIKey, error) {
	in := struct {
		Arg0 string `json:"name"`
	}{name}
	out := struct {
		Ret0 *APIKey `json:"key"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[21], in, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) ListAPIKeys(ctx context.Context, includeRevoked bool) ([]*APIKey, error) {
	in := struct {
		Arg0 bool `json:"includeRevoked"`
	}{includeRevoked}
	out := struct {
		Ret0 []*APIKey `json:"keys"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[22], in, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) GetRawAPIKey(ctx context.Context, keyID string) (string, error) {
	in := struct {
		Arg0 string `json:"keyID"`
	}{keyID}
	out := struct {
		Ret0 string `json:"keyString"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[23], in, &out)
	return out.Ret0, err
}

func (c *blobheartAPIClient) RevokeAPIKey(ctx context.Context, keyID string) error {
	in := struct {
		Arg0 string `json:"keyID"`
	}{keyID}
	_, err := clientRequest(ctx, c.client, c.urls[24], in, nil)
	return err
}

type bzzClient struct {
	client HTTPClient
	urls   [4]string
}

func NewBzzClient(addr string, client HTTPClient) BzzClient {
	prefix := urlBase(addr) + BzzPathPrefix
	urls := [4]string{
		prefix + "Ping",
		prefix + "Sample",
		prefix + "Distance",
		prefix + "Embed",
	}
	return &bzzClient{
		client: client,
		urls:   urls,
	}
}

func (c *bzzClient) Ping(ctx context.Context) (string, error) {
	out := struct {
		Ret0 string `json:"pong"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[0], nil, &out)
	return out.Ret0, err
}

func (c *bzzClient) Sample(ctx context.Context, prompt string, num_samples int, max_tokens int, temperature float32) ([]string, error) {
	in := struct {
		Arg0 string  `json:"prompt"`
		Arg1 int     `json:"num_samples"`
		Arg2 int     `json:"max_tokens"`
		Arg3 float32 `json:"temperature"`
	}{prompt, num_samples, max_tokens, temperature}
	out := struct {
		Ret0 []string `json:"text"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[1], in, &out)
	return out.Ret0, err
}

func (c *bzzClient) Distance(ctx context.Context, anchor string, targets []string) ([]float32, error) {
	in := struct {
		Arg0 string   `json:"anchor"`
		Arg1 []string `json:"targets"`
	}{anchor, targets}
	out := struct {
		Ret0 []float32 `json:"similarities"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[2], in, &out)
	return out.Ret0, err
}

func (c *bzzClient) Embed(ctx context.Context, texts []string) ([][]float32, error) {
	in := struct {
		Arg0 []string `json:"texts"`
	}{texts}
	out := struct {
		Ret0 [][]float32 `json:"embeddings"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[3], in, &out)
	return out.Ret0, err
}

type aurthurClient struct {
	client HTTPClient
	urls   [6]string
}

func NewAurthurClient(addr string, client HTTPClient) AurthurClient {
	prefix := urlBase(addr) + AurthurPathPrefix
	urls := [6]string{
		prefix + "Auth",
		prefix + "CheckAPIKeyScope",
		prefix + "CreateKey",
		prefix + "GetKeyValue",
		prefix + "DeleteKey",
		prefix + "AddScope",
	}
	return &aurthurClient{
		client: client,
		urls:   urls,
	}
}

func (c *aurthurClient) Auth(ctx context.Context, email string, password string) (string, error) {
	in := struct {
		Arg0 string `json:"email"`
		Arg1 string `json:"password"`
	}{email, password}
	out := struct {
		Ret0 string `json:"token"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[0], in, &out)
	return out.Ret0, err
}

func (c *aurthurClient) CheckAPIKeyScope(ctx context.Context, key string, scope string) (bool, error) {
	in := struct {
		Arg0 string `json:"key"`
		Arg1 string `json:"scope"`
	}{key, scope}
	out := struct {
		Ret0 bool `json:"valid"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[1], in, &out)
	return out.Ret0, err
}

func (c *aurthurClient) CreateKey(ctx context.Context, scopes []string) (*AurthurKey, error) {
	in := struct {
		Arg0 []string `json:"scopes"`
	}{scopes}
	out := struct {
		Ret0 *AurthurKey `json:"key"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[2], in, &out)
	return out.Ret0, err
}

func (c *aurthurClient) GetKeyValue(ctx context.Context, keyID string) (string, error) {
	in := struct {
		Arg0 string `json:"keyID"`
	}{keyID}
	out := struct {
		Ret0 string `json:"keyString"`
	}{}
	_, err := clientRequest(ctx, c.client, c.urls[3], in, &out)
	return out.Ret0, err
}

func (c *aurthurClient) DeleteKey(ctx context.Context, keyID string) error {
	in := struct {
		Arg0 string `json:"keyID"`
	}{keyID}
	_, err := clientRequest(ctx, c.client, c.urls[4], in, nil)
	return err
}

func (c *aurthurClient) AddScope(ctx context.Context, keyID string, scope string) error {
	in := struct {
		Arg0 string `json:"keyID"`
		Arg1 string `json:"scope"`
	}{keyID, scope}
	_, err := clientRequest(ctx, c.client, c.urls[5], in, nil)
	return err
}

//
// Client helpers
//

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

func clientRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) (*http.Response, error) {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return nil, Errorf(ErrInvalidArgument, err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return nil, Errorf(ErrAborted, err, "aborted because context was done")
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(reqBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	if headers, ok := GetClientRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}

	resp, err := client.Do(req)
	if err != nil {
		return resp, Errorf(ErrFail, err, "request failed")
	}

	// auto-close body for non-streaming outputs
	if out != nil {
		defer func() {
			cerr := resp.Body.Close()
			if err == nil && cerr != nil {
				err = Errorf(ErrFail, cerr, "failed to close response body")
			}
		}()
	}

	if err = ctx.Err(); err != nil {
		return resp, Errorf(ErrAborted, err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return resp, errorFromResponse(resp)
	}

	if out != nil {
		respBody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return resp, Errorf(ErrInternal, err, "failed to read response body")
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return resp, Errorf(ErrInternal, err, "failed to unmarshal json response body")
		}
		if err = ctx.Err(); err != nil {
			return resp, Errorf(ErrAborted, err, "aborted because context was done")
		}
	}

	return resp, nil
}

// errorFromResponse builds a webrpc Error from a non-200 HTTP response.
func errorFromResponse(resp *http.Response) Error {
	respBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return Errorf(ErrInternal, err, "failed to read server error response body")
	}
	var respErr Error
	if err := json.Unmarshal(respBody, &respErr); err != nil {
		return Errorf(ErrInternal, err, "failed unmarshal error response")
	}
	return respErr
}

func WithClientRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func GetClientRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Error helpers
//

type Error struct {
	Code    error  `json:"code"`
	Message string `json:"message"`
	Cause   error  `json:"-"`
}

func (e Error) Error() string {
	return e.Message
}

func (e Error) Is(target error) bool {
	if errors.Is(target, e.Code) {
		return true
	}
	if e.Cause != nil && errors.Is(target, e.Cause) {
		return true
	}
	return false
}

func (e Error) Unwrap() error {
	if e.Cause != nil {
		return e.Cause
	} else {
		return e.Code
	}
}

func (e Error) MarshalJSON() ([]byte, error) {
	m, err := json.Marshal(e.Message)
	if err != nil {
		return nil, err
	}
	j := bytes.NewBufferString(`{`)
	j.WriteString(`"message": `)
	j.Write(m)
	j.WriteString(`}`)
	return j.Bytes(), nil
}

func (e *Error) UnmarshalJSON(b []byte) error {
	payload := struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}{}
	err := json.Unmarshal(b, &payload)
	if err != nil {
		return err
	}
	code := ErrorCodeFromString(payload.Code)
	if code == nil {
		code = ErrUnknown
	}
	*e = Error{
		Code:    code,
		Message: payload.Message,
	}
	return nil
}

var (
	// Fail indiciates a general error to processing a request.
	ErrFail = errors.New("fail")

	// Unknown error. For example when handling errors raised by APIs that do not
	// return enough error information.
	ErrUnknown = errors.New("unknown")

	// Internal errors. When some invariants expected by the underlying system
	// have been broken. In other words, something bad happened in the library or
	// backend service. Do not confuse with HTTP Internal Server Error; an
	// Internal error could also happen on the client code, i.e. when parsing a
	// server response.
	ErrInternal = errors.New("internal server error")

	// Unavailable indicates the service is currently unavailable. This is a most
	// likely a transient condition and may be corrected by retrying with a
	// backoff.
	ErrUnavailable = errors.New("unavailable")

	// Unsupported indicates the request was unsupported by the server. Perhaps
	// incorrect protocol version or missing feature.
	ErrUnsupported = errors.New("unsupported")

	// Canceled indicates the operation was cancelled (typically by the caller).
	ErrCanceled = errors.New("canceled")

	// InvalidArgument indicates client specified an invalid argument. It
	// indicates arguments that are problematic regardless of the state of the
	// system (i.e. a malformed file name, required argument, number out of range,
	// etc.).
	ErrInvalidArgument = errors.New("invalid argument")

	// DeadlineExceeded means operation expired before completion. For operations
	// that change the state of the system, this error may be returned even if the
	// operation has completed successfully (timeout).
	ErrDeadlineExceeded = errors.New("deadline exceeded")

	// NotFound means some requested entity was not found.
	ErrNotFound = errors.New("not found")

	// BadRoute means that the requested URL path wasn't routable to a webrpc
	// service and method. This is returned by the generated server, and usually
	// shouldn't be returned by applications. Instead, applications should use
	// NotFound or Unimplemented.
	ErrBadRoute = errors.New("bad route")

	// ErrMethodNotAllowed means that the requested URL path is available and the user
	// is authenticated and authorized. The input arguments are valid, but the
	// server needs to refuse the request for some reason
	ErrMethodNotAllowed = errors.New("method not allowed")

	// AlreadyExists means an attempt to create an entity failed because one
	// already exists.
	ErrAlreadyExists = errors.New("already exists")

	// PermissionDenied indicates the caller does not have permission to execute
	// the specified operation. It must not be used if the caller cannot be
	// identified (Unauthenticated).
	ErrPermissionDenied = errors.New("permission denied")

	// Unauthenticated indicates the request does not have valid authentication
	// credentials for the operation.
	ErrUnauthenticated = errors.New("unauthenticated")

	// ResourceExhausted indicates some resource has been exhausted, perhaps a
	// per-user quota, or perhaps the entire file system is out of space.
	ErrResourceExhausted = errors.New("resource exhausted")

	// Aborted indicates the operation was aborted, typically due to a concurrency
	// issue like sequencer check failures, transaction aborts, etc.
	ErrAborted = errors.New("aborted")

	// OutOfRange means operation was attempted past the valid range. For example,
	// seeking or reading past end of a paginated collection.
	ErrOutOfRange = errors.New("out of range")

	// Unimplemented indicates operation is not implemented or not
	// supported/enabled in this service.
	ErrUnimplemented = errors.New("unimplemented")

	// StreamClosed indicates that a connection stream has been closed.
	ErrStreamClosed = errors.New("stream closed")

	// StreamLost indiciates that a client or server connection has been interrupted
	// during an active transmission. It's a good idea to reconnect.
	ErrStreamLost = errors.New("stream lost")
)

func HTTPStatusFromError(err error) int {
	if errors.Is(err, ErrFail) {
		return 422 // Unprocessable Entity
	}
	if errors.Is(err, ErrUnknown) {
		return 400 // BadRequest
	}
	if errors.Is(err, ErrInternal) {
		return 500 // Internal Server Error
	}
	if errors.Is(err, ErrUnavailable) {
		return 503 // Service Unavailable
	}
	if errors.Is(err, ErrUnsupported) {
		return 500 // Internal Server Error
	}
	if errors.Is(err, ErrCanceled) {
		return 408 // RequestTimeout
	}
	if errors.Is(err, ErrInvalidArgument) {
		return 400 // BadRequest
	}
	if errors.Is(err, ErrDeadlineExceeded) {
		return 408 // RequestTimeout
	}
	if errors.Is(err, ErrNotFound) {
		return 404 // Not Found
	}
	if errors.Is(err, ErrBadRoute) {
		return 404 // Not Found
	}
	if errors.Is(err, ErrMethodNotAllowed) {
		return 405 // Method not allowed
	}
	if errors.Is(err, ErrAlreadyExists) {
		return 409 // Conflict
	}
	if errors.Is(err, ErrPermissionDenied) {
		return 403 // Forbidden
	}
	if errors.Is(err, ErrUnauthenticated) {
		return 401 // Unauthorized
	}
	if errors.Is(err, ErrResourceExhausted) {
		return 403 // Forbidden
	}
	if errors.Is(err, ErrAborted) {
		return 409 // Conflict
	}
	if errors.Is(err, ErrOutOfRange) {
		return 400 // Bad Request
	}
	if errors.Is(err, ErrUnimplemented) {
		return 501 // Not Implemented
	}
	if errors.Is(err, ErrStreamClosed) {
		return 200 // OK
	}
	if errors.Is(err, ErrStreamLost) {
		return 408 // RequestTimeout
	}
	return 500 // Invalid!
}

func ErrorCodeFromString(code string) error {
	switch code {
	case "fail":
		return ErrFail
	case "unknown":
		return ErrUnknown
	case "internal server error":
		return ErrInternal
	case "unavailable":
		return ErrUnavailable
	case "unsupported":
		return ErrUnsupported
	case "canceled":
		return ErrCanceled
	case "invalid argument":
		return ErrInvalidArgument
	case "deadline exceeded":
		return ErrDeadlineExceeded
	case "not found":
		return ErrNotFound
	case "bad route":
		return ErrBadRoute
	case "method not allowed":
		return ErrMethodNotAllowed
	case "already exists":
		return ErrAlreadyExists
	case "permission denied":
		return ErrPermissionDenied
	case "unauthenticated":
		return ErrUnauthenticated
	case "resource exhausted":
		return ErrResourceExhausted
	case "aborted":
		return ErrAborted
	case "out of range":
		return ErrOutOfRange
	case "unimplemented":
		return ErrUnimplemented
	case "stream closed":
		return ErrStreamClosed
	case "stream lost":
		return ErrStreamLost
	default:
		return nil
	}
}

func Errorf(code error, cause error, message string, args ...interface{}) Error {
	if ErrorCodeFromString(code.Error()) == nil {
		panic("invalid error code")
	}
	return Error{Code: code, Message: fmt.Sprintf(message, args...), Cause: cause}
}

func Failf(cause error, message string, args ...interface{}) Error {
	return Error{Code: ErrFail, Message: fmt.Sprintf(message, args...), Cause: cause}
}

func ErrorUnknown(message string, args ...interface{}) Error {
	return Errorf(ErrUnknown, nil, message, args...)
}

func ErrorInternal(message string, args ...interface{}) Error {
	return Errorf(ErrInternal, nil, message, args...)
}

func ErrorUnavailable(message string, args ...interface{}) Error {
	return Errorf(ErrUnavailable, nil, message, args...)
}

func ErrorUnsupported(message string, args ...interface{}) Error {
	return Errorf(ErrUnsupported, nil, message, args...)
}

func ErrorCanceled(message string, args ...interface{}) Error {
	return Errorf(ErrCanceled, nil, message, args...)
}

func ErrorInvalidArgument(message string, args ...interface{}) Error {
	return Errorf(ErrInvalidArgument, nil, message, args...)
}

func ErrorDeadlineExceeded(message string, args ...interface{}) Error {
	return Errorf(ErrDeadlineExceeded, nil, message, args...)
}

func ErrorNotFound(message string, args ...interface{}) Error {
	return Errorf(ErrNotFound, nil, message, args...)
}

func ErrorBadRoute(message string, args ...interface{}) Error {
	return Errorf(ErrBadRoute, nil, message, args...)
}

func ErrorMethodNotAllowed(message string, args ...interface{}) Error {
	return Errorf(ErrMethodNotAllowed, nil, message, args...)
}

func ErrorAlreadyExists(message string, args ...interface{}) Error {
	return Errorf(ErrAlreadyExists, nil, message, args...)
}

func ErrorPermissionDenied(message string, args ...interface{}) Error {
	return Errorf(ErrPermissionDenied, nil, message, args...)
}

func ErrorUnauthenticated(message string, args ...interface{}) Error {
	return Errorf(ErrUnauthenticated, nil, message, args...)
}

func ErrorResourceExhausted(message string, args ...interface{}) Error {
	return Errorf(ErrResourceExhausted, nil, message, args...)
}

func ErrorAborted(message string, args ...interface{}) Error {
	return Errorf(ErrAborted, nil, message, args...)
}

func ErrorOutOfRange(message string, args ...interface{}) Error {
	return Errorf(ErrOutOfRange, nil, message, args...)
}

func ErrorUnimplemented(message string, args ...interface{}) Error {
	return Errorf(ErrUnimplemented, nil, message, args...)
}

func ErrorStreamClosed(message string, args ...interface{}) Error {
	return Errorf(ErrStreamClosed, nil, message, args...)
}

func ErrorStreamLost(message string, args ...interface{}) Error {
	return Errorf(ErrStreamLost, nil, message, args...)
}

func GetErrorStack(err error) []error {
	errs := []error{err}
	for {
		unwrap, ok := err.(interface{ Unwrap() error })
		if !ok {
			break
		}
		werr := unwrap.Unwrap()
		if werr == nil {
			break
		}
		errs = append(errs, werr)
		err = werr
	}
	return errs
}

//
// Misc helpers
//

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	// For Client
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}

	// For Server
	HTTPResponseWriterCtxKey = &contextKey{"HTTPResponseWriter"} // http.ResponseWriter
	HTTPRequestCtxKey        = &contextKey{"HTTPRequest"}        // *http.Request
	ServiceNameCtxKey        = &contextKey{"ServiceName"}        // string
	MethodNameCtxKey         = &contextKey{"MethodName"}         // string
)
